<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:redisson="http://redisson.org/schema/redisson" xsi:schemaLocation="
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
		http://www.springframework.org/schema/context  http://www.springframework.org/schema/context/spring-context-3.2.xsd
        http://redisson.org/schema/redisson
        http://redisson.org/schema/redisson/redisson.xsd"
       default-lazy-init="true">

    <description>Jedis Configuration</description>

    <!-- 加载配置属性文件 -->
    <context:property-placeholder ignore-unresolvable="true" location="classpath:jeesite.properties"/>

    <bean id="jedisPoolConfig" class="redis.clients.jedis.JedisPoolConfig">
        <property name="maxIdle" value="${redis.maxIdle}"/> <!-- 最大能够保持idel状态的对象数  -->
        <property name="maxTotal" value="${redis.maxTotal}"/> <!-- 最大分配的对象数 -->
        <property name="maxWaitMillis" value="${redis.maxWait}"/>
        <property name="testOnBorrow" value="true"/>
    </bean>

    <bean id="jedisConnectionFactory" class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory">
        <!-- 连接池配置. -->
        <property name="poolConfig" ref="jedisPoolConfig"/>
        <!-- Redis服务主机. -->
        <property name="hostName" value="${redis.host}"/>
        <!-- Redis服务端口号. -->
        <property name="port" value="${redis.port}"/>
        <!-- Redis服务连接密码. -->
        <property name="password" value="${redis.pass}" />
        <!-- 连超时设置. -->
        <property name="timeout" value="15000"/>
        <!-- 是否使用连接池. -->
        <property name="usePool" value="true"/>
    </bean>

    <!-- redis 序列化策略 ，通常情况下key值采用String序列化策略， -->
    <!-- 如果不指定序列化策略，StringRedisTemplate的key和value都将采用String序列化策略； -->
    <!-- 但是RedisTemplate的key和value都将采用JDK序列化 这样就会出现采用不同template保存的数据不能用同一个template删除的问题 -->
    <bean id="stringRedisSerializer"
          class="org.springframework.data.redis.serializer.StringRedisSerializer" />

    <bean id='redisTemplate' class="org.springframework.data.redis.core.RedisTemplate">
        <property name="connectionFactory" ref="jedisConnectionFactory" />
        <property name="keySerializer" ref="stringRedisSerializer" />
        <property name="hashKeySerializer" ref="stringRedisSerializer" />
    </bean>

    <redisson:client id="redisClient">
        <redisson:single-server address="${redis.address}" password="${redis.pass}"/>
    </redisson:client>
</beans>